/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/documentMappers";
import * as Parameters from "../models/parameters";
import { ConcordiaApiContext } from "../concordiaApiContext";

/** Class representing a Document. */
export class Document {
  private readonly client: ConcordiaApiContext;

  /**
   * Create a Document.
   * @param {ConcordiaApiContext} client Reference to the service client.
   */
  constructor(client: ConcordiaApiContext) {
    this.client = client;
  }

  /**
   * This viewset automatically provides list and detail actions
   * @param [options] The optional parameters
   * @returns Promise<Models.DocumentListResponse>
   */
  list(options?: Models.DocumentListOptionalParams): Promise<Models.DocumentListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.ListOKResponseModel>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: Models.DocumentListOptionalParams, callback: msRest.ServiceCallback<Models.ListOKResponseModel>): void;
  list(options?: Models.DocumentListOptionalParams | msRest.ServiceCallback<Models.ListOKResponseModel>, callback?: msRest.ServiceCallback<Models.ListOKResponseModel>): Promise<Models.DocumentListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.DocumentListResponse>;
  }

  /**
   * This viewset automatically provides list and detail actions
   * @param data
   * @param [options] The optional parameters
   * @returns Promise<Models.DocumentCreateResponse>
   */
  create(data: Models.DocumentType, options?: msRest.RequestOptionsBase): Promise<Models.DocumentCreateResponse>;
  /**
   * @param data
   * @param callback The callback
   */
  create(data: Models.DocumentType, callback: msRest.ServiceCallback<Models.DocumentType>): void;
  /**
   * @param data
   * @param options The optional parameters
   * @param callback The callback
   */
  create(data: Models.DocumentType, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DocumentType>): void;
  create(data: Models.DocumentType, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DocumentType>, callback?: msRest.ServiceCallback<Models.DocumentType>): Promise<Models.DocumentCreateResponse> {
    return this.client.sendOperationRequest(
      {
        data,
        options
      },
      createOperationSpec,
      callback) as Promise<Models.DocumentCreateResponse>;
  }

  /**
   * This viewset automatically provides list and detail actions
   * @param id A unique integer value identifying this document type.
   * @param [options] The optional parameters
   * @returns Promise<Models.DocumentReadResponse>
   */
  read(id: number, options?: msRest.RequestOptionsBase): Promise<Models.DocumentReadResponse>;
  /**
   * @param id A unique integer value identifying this document type.
   * @param callback The callback
   */
  read(id: number, callback: msRest.ServiceCallback<Models.DocumentType>): void;
  /**
   * @param id A unique integer value identifying this document type.
   * @param options The optional parameters
   * @param callback The callback
   */
  read(id: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DocumentType>): void;
  read(id: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DocumentType>, callback?: msRest.ServiceCallback<Models.DocumentType>): Promise<Models.DocumentReadResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      readOperationSpec,
      callback) as Promise<Models.DocumentReadResponse>;
  }

  /**
   * This viewset automatically provides list and detail actions
   * @param data
   * @param id A unique integer value identifying this document type.
   * @param [options] The optional parameters
   * @returns Promise<Models.DocumentUpdateResponse>
   */
  update(data: Models.DocumentType, id: number, options?: msRest.RequestOptionsBase): Promise<Models.DocumentUpdateResponse>;
  /**
   * @param data
   * @param id A unique integer value identifying this document type.
   * @param callback The callback
   */
  update(data: Models.DocumentType, id: number, callback: msRest.ServiceCallback<Models.DocumentType>): void;
  /**
   * @param data
   * @param id A unique integer value identifying this document type.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(data: Models.DocumentType, id: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DocumentType>): void;
  update(data: Models.DocumentType, id: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DocumentType>, callback?: msRest.ServiceCallback<Models.DocumentType>): Promise<Models.DocumentUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        data,
        id,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.DocumentUpdateResponse>;
  }

  /**
   * This viewset automatically provides list and detail actions
   * @param data
   * @param id A unique integer value identifying this document type.
   * @param [options] The optional parameters
   * @returns Promise<Models.DocumentUpdate1Response>
   */
  update1(data: Models.DocumentType, id: number, options?: msRest.RequestOptionsBase): Promise<Models.DocumentUpdate1Response>;
  /**
   * @param data
   * @param id A unique integer value identifying this document type.
   * @param callback The callback
   */
  update1(data: Models.DocumentType, id: number, callback: msRest.ServiceCallback<Models.DocumentType>): void;
  /**
   * @param data
   * @param id A unique integer value identifying this document type.
   * @param options The optional parameters
   * @param callback The callback
   */
  update1(data: Models.DocumentType, id: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DocumentType>): void;
  update1(data: Models.DocumentType, id: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DocumentType>, callback?: msRest.ServiceCallback<Models.DocumentType>): Promise<Models.DocumentUpdate1Response> {
    return this.client.sendOperationRequest(
      {
        data,
        id,
        options
      },
      update1OperationSpec,
      callback) as Promise<Models.DocumentUpdate1Response>;
  }

  /**
   * This viewset automatically provides list and detail actions
   * @param id A unique integer value identifying this document type.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(id: number, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param id A unique integer value identifying this document type.
   * @param callback The callback
   */
  deleteMethod(id: number, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param id A unique integer value identifying this document type.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(id: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(id: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        id,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "document_type",
  queryParameters: [
    Parameters.limit,
    Parameters.offset
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ListOKResponseModel
    },
    default: {}
  },
  serializer
};

const createOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "document_type",
  requestBody: {
    parameterPath: "data",
    mapper: {
      ...Mappers.DocumentType,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.DocumentType
    },
    default: {}
  },
  serializer
};

const readOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "document_type/{id}/",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DocumentType
    },
    default: {}
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "document_type/{id}/",
  urlParameters: [
    Parameters.id
  ],
  requestBody: {
    parameterPath: "data",
    mapper: {
      ...Mappers.DocumentType,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DocumentType
    },
    default: {}
  },
  serializer
};

const update1OperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "document_type/{id}/",
  urlParameters: [
    Parameters.id
  ],
  requestBody: {
    parameterPath: "data",
    mapper: {
      ...Mappers.DocumentType,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DocumentType
    },
    default: {}
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "document_type/{id}/",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    204: {},
    default: {}
  },
  serializer
};
